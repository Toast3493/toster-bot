// === –ü–æ–¥–∫–ª—é—á–∞–µ–º dotenv –í–°–ï–ì–î–ê –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ ===
require('dotenv').config();

// === –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º discord.js ===
const { Client, GatewayIntentBits, REST, Routes } = require('discord.js');

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
const BOT_TOKEN = process.env.BOT_TOKEN;
const GUILD_ID = '1405123287914119310';
const SELLER_ROLE_ID = '1405123287914119314';
const BUYER_ROLE_ID = '1405123287914119313';
const ANNOUNCE_CHANNEL_ID = '1405123288493068293';
const VERIFICATION_CHANNEL_NAME = '‚úÖ‚û£–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è';
const TICKETS_CHANNEL_ID = '1405123288757436462';
const AUTH_CHANNEL_ID = '1405523331632992306';
const ADMIN_ROLE_ID = '1405123287914119315';
const TICKET_CATEGORY_ID = '1405123288757436461';

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ ===
if (!BOT_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
  process.exit(1);
}

// === –ö–ª–∏–µ–Ω—Ç –±–æ—Ç–∞ ===
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
  ]
});

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ ===
function generateCode() {
  return Math.random().toString(36).toUpperCase().substr(2, 6);
}

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Firebase Admin ===
const admin = require('firebase-admin');

const serviceAccount = {
  "type": "service_account",
  "project_id": "necoshop-8a4c3",
  "private_key_id": "4c23ef376ab327a540f58d30a7f414ede4d71b38",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDNrqCUANtg5HmT\nHTp62I6GI5bv91Y8hqq8GaRdiKM9xD3/HtamHlp09TyVYnLQ/FVb5kR1KdXW+ixt\nSNjRRISGF9uUgRs2hN7OEXAbKTF+srQflqHZ0kKpSfcoKp5vUQ4iW9j7zVNA9lA1\nYR6tD6E1Yht2TLwgWIV8sLYURpQZl3MlhGPuGw7M3YUTLlIsQRG/oTelby+alejp\n5HrtyJWXdkdyzyT0SJAewyqsnXAh2ZIpmhpP6BhHNSXdPHewBuHQ8siNcTUvdni1\ntKcTqaCkogXYZDMTff7LjWfAdvGLu3tc+k+qanCyw91iIzONqnFLi2TPfw5UX5Qa\n2k6FwFuDAgMBAAECggEAIHPnsUKLWrfh+NTZR83IeyC9bYJskGM9KC2xkfJ/szy1\n/X17p71NT3vsQbPFYvUVcMkdzxC5RVC21s1yLF6vvEqiYkWWqhz/3KrCsf5naVK/\n+eX2BpzW2MgrX6KN2gmDfedZDq3gb3UNxcZbpTm8mWQv6hQEcOQWt8xYBk32iyzi\nTADO1h0CM6SBsPY1qECFdeqOSgIuyngAIgwyw7hxJpO80te88GsXuwhP06yv9nIP\nDiXgsb6/ynqojMeccMzDIwyfnF1sxp3zjBM5NgR4St1ke3eytDPyGPOsX0GwqlPx\n4/KhermD1V/0WAkUSLrb1lwxsEml5Z0N6aWmbbR7kQKBgQDvRdROFBT1Gyk1j90M\nAJ/tkf3lEUUrtioWh9kAKnZKNHtTvUQ+JSZr+mEPBlzZ7cknWH7NGzw3MLm9NUre\netFwZ+3qdBF67GqA1ZMMwam1CEF4JHAC21bDqPX9V9xI7o9+jlBSOSWkWOrCmGpN\nvq+cex3YTgztryx5CdZC2+lckQKBgQDcD6O8TrUf7d8CGTlE69BV16gLy/3ti5kf\n6I3OHzO5BcwwPPMY0H6EsQCIHDtF4Dx/QtE7g4lK9KDKi/00PRBodxlsoCZ5NjeM\nh0WH0iM3WL+vqSFtdVL7Sg9ReuK6cEWxOgwN6/1Ma/m3c18lQ/cwu0jev7nkwGin\njr4nlKAQ0wKBgQDQRNLwh3BajSLImYnJyb1rV9lNC0RPMQffhq2vBEbkflwe3q7I\n/SM9d7oGDv7BPsYJtnDg7WTzkTkLZZjeoL8u/XfMzOzuN1zY+Y4+209x4VbDUcwh\n4HPcaXR86X44CVbjzNJDT7ThIfhuG6bkNye6qDupLP754LFwRcy3c53j0QKBgQDE\nazE6YwZH+YmT1e/IFLNf652S6gE8hd2nHWt1D2SbQRF//Ob+vxouVc6jro85T2yw\nKnOXK1DgFnluUIUwm1CJ7cRDsK6mgj4SsKrfEDFetVhi8hNkH9Rxdyk1EPpObufF\nyIn54ymzjKzXkaLbIE8CsCfaqkbCZvsCk+YmbgJxAQKBgQDBK2uGqou/Pt8rFt1+\nbX00gK68AiPgexmB5uLM2n+htxym0Y9KkEwGsDg5vP82G+LDt+zDMwya10ofk8IV\nf7RN8gxiOelUa25VhQnR2GALPFYhAViFpUiUjUcsxuClM9L6QFgO3NrgeJWq3uyp\nnBugd8vmCAw+sBlqTTXBDFB3AQ==\n-----END PRIVATE KEY-----\n",
  "client_email": "firebase-adminsdk-fbsvc@necoshop-8a4c3.iam.gserviceaccount.com",
  "client_id": "111125955451167214596",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fbsvc%40necoshop-8a4c3.iam.gserviceaccount.com"
};

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://necoshop-8a4c3-default-rtdb.firebaseio.com"
});

const db = admin.database();

// === –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞ ‚Äî –û–î–ò–ù —Ä–∞–∑ ===
client.once('ready', async () => {
  console.log(`‚úÖ –ë–æ—Ç –≤–æ—à—ë–ª –∫–∞–∫ ${client.user.tag}`);
  client.user.setActivity('–Ω–∞ tostershop.netlify.app', { type: 'WATCHING' });

  // === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ ===
  const rest = new REST({ version: '10' }).setToken(BOT_TOKEN);
  const commands = [{ name: 'roles', description: '–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏' }];

  try {
    await rest.put(
      Routes.applicationGuildCommands(client.user.id, GUILD_ID),
      { body: commands }
    );
    console.log('‚úÖ Slash-–∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
  }

  // === –ö–Ω–æ–ø–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ===
  const verificationChannel = client.channels.cache.find(
    ch => ch.name === VERIFICATION_CHANNEL_NAME && ch.type === 0
  );
  if (verificationChannel) {
    const messages = await verificationChannel.messages.fetch({ limit: 10 });
    const existing = messages.find(m => m.author.id === client.user.id);
    if (!existing) {
      const embed = {
        title: 'üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        description: `
–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º, –ø—Ä–æ–π–¥–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.

1. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ
2. –í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫ –≤ Minecraft
3. –ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É —Å–µ—Ä–≤–µ—Ä—É

‚ùó –ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å Minecraft.
        `,
        color: 0x00ff00,
        footer: { text: 'TosterShop' }
      };

      const row = {
        type: 1,
        components: [
          {
            type: 2,
            style: 1,
            label: '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è',
            custom_id: 'open_verification_modal'
          }
        ]
      };

      await verificationChannel.send({ embeds: [embed], components: [row] });
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ #‚úÖ‚û£–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è');
    }
  } else {
    console.error('‚ùå –ö–∞–Ω–∞–ª #‚úÖ‚û£–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  // === –ö–Ω–æ–ø–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤ ===
  const ticketsChannel = client.channels.cache.get(TICKETS_CHANNEL_ID);
  if (ticketsChannel) {
    const messages = await ticketsChannel.messages.fetch({ limit: 10 });
    const existing = messages.find(m => m.author.id === client.user.id);
    if (!existing) {
      const embed = {
        title: 'üì¨ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π',
        description: '–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Å–∞–π—Ç—É, –º–∞–≥–∞–∑–∏–Ω—É –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É ‚Äî —Å–æ–∑–¥–∞–π —Ç–∏–∫–µ—Ç.\n\nüí¨ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.',
        color: 0x0099ff,
        footer: { text: 'TosterShop ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞' }
      };

      const row = {
        type: 1,
        components: [
          {
            type: 2,
            style: 1,
            label: '–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç',
            custom_id: 'open_ticket_modal',
            emoji: 'üé´'
          }
        ]
      };

      await ticketsChannel.send({ embeds: [embed], components: [row] });
      console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    }
  } else {
    console.error('‚ùå –ö–∞–Ω–∞–ª –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
});

// === –ö–Ω–æ–ø–∫–∏-—Ä–æ–ª–∏ ===
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;

  const roleMap = {
    'role_seller': SELLER_ROLE_ID,
    'role_buyer': BUYER_ROLE_ID
  };

  const roleId = roleMap[interaction.customId];
  if (roleId) {
    const role = interaction.guild.roles.cache.get(roleId);
    const member = interaction.member;

    if (member.roles.cache.has(roleId)) {
      await member.roles.remove(role);
      await interaction.reply({ content: '–†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞.', ephemeral: true });
    } else {
      await member.roles.add(role);
      await interaction.reply({ content: '–†–æ–ª—å –≤—ã–¥–∞–Ω–∞!', ephemeral: true });
    }
  }
});

// === –ö–æ–º–∞–Ω–¥–∞ /roles ===
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  if (interaction.commandName === 'roles') {
    const channel = client.channels.cache.get(ANNOUNCE_CHANNEL_ID);
    if (!channel) return interaction.reply({ content: '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral: true });

    const embed = {
      title: 'üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TosterShop!',
      description: '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å:',
      color: 0xFFD700,
      fields: [
        { name: 'üõí –ü—Ä–æ–¥–∞–≤–µ—Ü', value: '–í—ã—Å—Ç–∞–≤–ª—è–π —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ.' },
        { name: 'üõçÔ∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å', value: '–ü–æ–∫—É–ø–∞–π —Ç–æ–≤–∞—Ä—ã –∏ —É—á–∞—Å—Ç–≤—É–π –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö.' }
      ]
    };

    const row = {
      type: 1,
      components: [
        { type: 2, style: 1, label: '–Ø –ü—Ä–æ–¥–∞–≤–µ—Ü', custom_id: 'role_seller' },
        { type: 2, style: 2, label: '–Ø –ü–æ–∫—É–ø–∞—Ç–µ–ª—å', custom_id: 'role_buyer' }
      ]
    };

    await channel.send({ embeds: [embed], components: [row] });
    await interaction.reply({ content: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–æ–ª—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', ephemeral: true });
  }
});

// === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ —Ä–æ–ª–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ ===
client.on('guildMemberAdd', async (member) => {
  if (member.guild.id !== GUILD_ID) return;

  const roleId = '1405123287914119311';
  const role = member.guild.roles.cache.get(roleId);

  if (!role) {
    console.error('‚ùå –†–æ–ª—å "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }

  try {
    await member.roles.add(role);
    console.log(`‚úÖ –†–æ–ª—å "${role.name}" –≤—ã–¥–∞–Ω–∞ –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É: ${member.user.tag}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏:', error);
  }
});

// === –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ===
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  if (interaction.customId !== 'open_verification_modal') return;

  const modal = {
    type: 9,
    custom_id: 'verification_modal',
    title: '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è',
    components: [
      {
        type: 1,
        components: [
          {
            type: 4,
            custom_id: 'minecraft_nick',
            label: '–¢–≤–æ–π –Ω–∏–∫ –≤ Minecraft',
            style: 1,
            placeholder: '–ù–∞–ø—Ä–∏–º–µ—Ä: korvy17',
            min_length: 2,
            max_length: 16,
            required: true
          }
        ]
      }
    ]
  };

  await interaction.showModal(modal);
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ===
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isModalSubmit()) return;
  if (interaction.customId !== 'verification_modal') return;

  const minecraftNick = interaction.fields.getTextInputValue('minecraft_nick');
  const guild = interaction.guild;
  const member = interaction.member;

  const verifiedRole = guild.roles.cache.get('1405174872987930644');
  if (!verifiedRole) {
    return interaction.reply({
      content: '‚ùå –û—à–∏–±–∫–∞: —Ä–æ–ª—å "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
      ephemeral: true
    });
  }

  if (member.roles.cache.has(verifiedRole.id)) {
    return interaction.reply({
      content: '‚úÖ –¢—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!',
      ephemeral: true
    });
  }

  try {
    const verificationRole = guild.roles.cache.get('1405123287914119311');
    if (member.roles.cache.has(verificationRole.id)) {
      await member.roles.remove(verificationRole);
    }

    await member.roles.add(verifiedRole);
    await member.setNickname(minecraftNick);

    await interaction.reply({
      content: `‚úÖ –û—Ç–ª–∏—á–Ω–æ, ${minecraftNick}! –¢—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!`,
      ephemeral: true
    });

    console.log(`‚úÖ ${interaction.user.tag} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ ${minecraftNick}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    await interaction.reply({
      content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. –û–±—Ä–∞—Ç–∏—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.',
      ephemeral: true
    });
  }
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤ ===
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  if (interaction.customId !== 'open_ticket_modal') return;

  const modal = {
    type: 9,
    custom_id: 'ticket_modal',
    title: '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞',
    components: [
      {
        type: 1,
        components: [
          {
            type: 4,
            custom_id: 'ticket_subject',
            label: '–¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è',
            style: 1,
            placeholder: '–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º',
            max_length: 50,
            required: true
          }
        ]
      },
      {
        type: 1,
        components: [
          {
            type: 4,
            custom_id: 'ticket_description',
            label: '–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É',
            style: 2,
            placeholder: '–ß—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç? –ö–∞–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏?',
            max_length: 1000,
            required: true
          }
        ]
      }
    ]
  };

  await interaction.showModal(modal);
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isModalSubmit()) return;
  if (interaction.customId !== 'ticket_modal') return;

  const subject = interaction.fields.getTextInputValue('ticket_subject');
  const description = interaction.fields.getTextInputValue('ticket_description');
  const user = interaction.user;
  const guild = interaction.guild;

  try {
    const channel = await guild.channels.create({
      name: `—Ç–∏–∫–µ—Ç-${user.username}`,
      type: 0,
      parent: TICKET_CATEGORY_ID,
      topic: `–¢–∏–∫–µ—Ç –æ—Ç ${user.tag} | ${new Date().toLocaleString('ru-RU')}`,
      permissionOverwrites: [
        { id: guild.id, deny: ['ViewChannel'] },
        { id: user.id, allow: ['ViewChannel', 'SendMessages', 'ReadMessageHistory'] },
        { id: ADMIN_ROLE_ID, allow: ['ViewChannel', 'SendMessages', 'ReadMessageHistory', 'ManageMessages'] },
        { id: client.user.id, allow: ['ViewChannel', 'SendMessages', 'ManageMessages'] }
      ]
    });

    const closeRow = {
      type: 1,
      components: [
        {
          type: 2,
          style: 4,
          label: '–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç',
          custom_id: 'close_ticket',
          emoji: 'üîí'
        }
      ]
    };

    const embed = {
      title: `üé´ –¢–∏–∫–µ—Ç: ${subject}`,
      description: description,
      color: 0x00ff9d,
      fields: [
        { name: 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value: `<@${user.id}>`, inline: true },
        { name: 'üÜî ID', value: user.id, inline: true },
        { name: 'üïí –°–æ–∑–¥–∞–Ω–æ', value: `<t:${Math.floor(Date.now() / 1000)}:R>`, inline: true }
      ],
      thumbnail: { url: user.displayAvatarURL({ dynamic: true }) },
      footer: { text: 'TosterShop ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞' }
    };

    await channel.send({
      content: `<@${user.id}> –∏ <@&${ADMIN_ROLE_ID}>`,
      embeds: [embed],
      components: [closeRow]
    });

    await interaction.reply({
      content: `‚úÖ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω! –ü–µ—Ä–µ–π–¥–∏ –≤ <#${channel.id}>`,
      ephemeral: true
    });

    console.log(`üé´ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: ${user.tag} ‚Äî ${subject}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
    await interaction.reply({
      content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç. –û–±—Ä–∞—Ç–∏—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.',
      ephemeral: true
    });
  }
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  if (interaction.customId !== 'close_ticket') return;

  const channel = interaction.channel;

  await interaction.reply({
    content: `üîí –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <@${interaction.user.id}>`,
    ephemeral: false
  });

  setTimeout(() => {
    if (channel.deletable) {
      channel.delete().catch(console.error);
    }
  }, 5000);
});

// === –ö–æ–º–∞–Ω–¥–∞ !auth ===
client.on('messageCreate', async (message) => {
  if (message.author.bot) return;
  if (message.channel.id !== AUTH_CHANNEL_ID) return;
  if (!message.content.startsWith('!auth')) return;

  const code = generateCode();
  const expiresAt = Date.now() + 10 * 60 * 1000;

  try {
    await db.ref(`auth_codes/${code}`).set({
      discordId: message.author.id,
      username: message.author.username,
      expiresAt
    });

    await message.author.send(`üîë –í–∞—à –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: \`${code}\`\n–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞: https://tostershop.netlify.app/auth.html`);
    await message.reply('–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –õ–°! ‚úÖ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞:', error);
    await message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }
});

// === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
client.login(BOT_TOKEN);
